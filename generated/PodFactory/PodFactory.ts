// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OptionCreated extends ethereum.Event {
  get params(): OptionCreated__Params {
    return new OptionCreated__Params(this);
  }
}

export class OptionCreated__Params {
  _event: OptionCreated;

  constructor(event: OptionCreated) {
    this._event = event;
  }

  get deployer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get option(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get exchangeAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PodFactory__createOptionResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class PodFactory extends ethereum.SmartContract {
  static bind(address: Address): PodFactory {
    return new PodFactory("PodFactory", address);
  }

  EMPTY_ADDRESS(): Address {
    let result = super.call("EMPTY_ADDRESS", "EMPTY_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_EMPTY_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "EMPTY_ADDRESS",
      "EMPTY_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  UNISWAPV1_FACTORY(): Address {
    let result = super.call(
      "UNISWAPV1_FACTORY",
      "UNISWAPV1_FACTORY():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_UNISWAPV1_FACTORY(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "UNISWAPV1_FACTORY",
      "UNISWAPV1_FACTORY():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createOption(
    _name: string,
    _symbol: string,
    _optionType: i32,
    _underlyingAsset: Address,
    _strikeAsset: Address,
    _strikePrice: BigInt,
    _expirationDate: BigInt
  ): PodFactory__createOptionResult {
    let result = super.call(
      "createOption",
      "createOption(string,string,uint8,address,address,uint256,uint256):(address,address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_optionType)),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromAddress(_strikeAsset),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expirationDate)
      ]
    );

    return new PodFactory__createOptionResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_createOption(
    _name: string,
    _symbol: string,
    _optionType: i32,
    _underlyingAsset: Address,
    _strikeAsset: Address,
    _strikePrice: BigInt,
    _expirationDate: BigInt
  ): ethereum.CallResult<PodFactory__createOptionResult> {
    let result = super.tryCall(
      "createOption",
      "createOption(string,string,uint8,address,address,uint256,uint256):(address,address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_optionType)),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromAddress(_strikeAsset),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expirationDate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PodFactory__createOptionResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  getNumberOfOptions(): BigInt {
    let result = super.call(
      "getNumberOfOptions",
      "getNumberOfOptions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfOptions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfOptions",
      "getNumberOfOptions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  options(param0: BigInt): Address {
    let result = super.call("options", "options(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_options(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("options", "options(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateOptionCall extends ethereum.Call {
  get inputs(): CreateOptionCall__Inputs {
    return new CreateOptionCall__Inputs(this);
  }

  get outputs(): CreateOptionCall__Outputs {
    return new CreateOptionCall__Outputs(this);
  }
}

export class CreateOptionCall__Inputs {
  _call: CreateOptionCall;

  constructor(call: CreateOptionCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _optionType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _strikeAsset(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _expirationDate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateOptionCall__Outputs {
  _call: CreateOptionCall;

  constructor(call: CreateOptionCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get exchangeAddress(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}
